# tries to emulate part of the current pipeline's directory structure
#####################
# REFERENCED ITEMS #
###################
# List subtrees which will be used in multiple spots of the path hierarchy later
##########
# ASSET ###
##########

# this tree demonstrates the use of explicit parent separators
# it can be used to make more meta-data available to generic algorithms
# as they can just use their typical node interface (without having to know which
# keys are actually substituted)

version_with_ext: &ref_version_ext
  meta:
    format: "v{resource.version:03d}"
    child_separator: .
    type: [Version]
  ext:
    meta:
      format: "{resource.ext}"
      type: [Extension]


maya_filename: &ref_maya_filename
  meta:
    format: "{asset.code}"
    type: [AssetPortion]
    child_separator: _
  workflow:
    meta:
      format: "{workflow.code}"
      child_separator: _
      type: [WorkflowPortion]
    variation:
      meta:
        format: "{resource.variation}"
        child_separator: _
        type: [Variation]
      step:
        meta:
          format: "{workflow.step}"
          child_separator: .
          type: [WorkflowStep]
        version: *ref_version_ext
      
      
production_asset: &ref_production_asset
  meta:
    format: "{asset.code}"
    type: [Entity, DAGItem, Asset]
  workflow:
    meta:
      format: "{workflow.name}"
      type: [Entity, Workflow]
    maya_file: *ref_maya_filename
  Textures:
    texture_type:
      meta:
        format: "{texture.type}"
      texture_file:
        meta:
          format: "{texture.name}.{texture.ext}"
          type: [Entity, Resource, File, Texture]
          

#########################
# PREPRODUCTION ASSET ##
#######################
preproduction_asset: &ref_preproduction_asset
  meta:
    format: "{asset.code}"
    type: [Entity, DAGItem, Asset]
  Work:
    user:
      meta:
        format: "{user.code}"
        # here people seem to put any files

##################
# ACTUAL TREE ###
################
root:
  meta:
    format: "{project.root_path.fs_absolute}"
    type: Root
  project:
    meta:
      format: "{project.code}"
      type: [Entity, DAGItem, Project]
    editing_dept:
      meta:
        format: "Editing"
        type: [Entity, Department, Editing]
    plugins:
      meta:
        format: "Plugins"
        type: [Directory, Plugins]
    Presentation:
      weekly:
        meta:
          format: "WEEKLY"
    production:
      meta:
        format: "Production"
    ProjectControl:
      - Compositing
      - DeliverySpecs
      - EDL
      - LineUpSheet
      - MeetingMinutes
      - Rendering
      - Schedule
      - SubmissionSheets
      - VFXBreakdown
      - Weekly
    #end projectcontrol
    references:
      meta:
        format: "References"
    rnd:
      meta:
        format: "RND"
    scripts:
      meta:
        format: "Scripts"
        type: [Directory, Code]
      pipeline:
        meta:
          format: "Pipeline"
          type: [Directory, Code, Pipeline]
      maya:
        meta:
          format: "Maya"
          type: [Directory, Code, Maya]
    #end scripts
    SourceMedia:
      - References
      - Scans
    # PROJECT/LIBRARY (PrePreduction)
    ################################
    library_pre_production:
      meta:
        format: "Library"
        type: [Entity, DAGItem, Library]
      plugins:
        meta:
          format: "Vfx"
          type: Directory
      # NOTE: This has to be copied as we cannot have an external loop, nor
      # can we write it any easier using yaml (as we are missing functions, its
      # declarative after all)
      # Therefore we duplicate it, which basically shows that this structure
      # does not make so much sense
      workflow:
        meta:
          format: "ConceptArt"
          type: Directory
        characters:
          meta:
            format: "Characters"
            type: [Entity, DAGItem, Character]
          asset: *ref_preproduction_asset
        props:
          meta:
            format: "Props"
            type: [Entity, DAGItem, Prop]
          asset: *ref_preproduction_asset
        sets:
          meta:
            format: "Sets"
            type: [Entity, DAGItem, Set]
          asset: *ref_preproduction_asset
      workflow:
        meta:
          format: "Modeling"
          type: Directory
        characters:
          meta:
            format: "Characters"
            type: [Entity, DAGItem, Character]
          asset: *ref_preproduction_asset
        props:
          meta:
            format: "Props"
            type: [Entity, DAGItem, Prop]
          asset: *ref_preproduction_asset
        sets:
          meta:
            format: "Sets"
            type: [Entity, DAGItem, Set]
          asset: *ref_preproduction_asset
      workflow:
        meta:
          format: "Rigging"
          type: Directory
        characters:
          meta:
            format: "Characters"
            type: [Entity, DAGItem, Character]
          asset: *ref_preproduction_asset
        props:
          meta:
            format: "Props"
            type: [Entity, DAGItem, Prop]
          asset: *ref_preproduction_asset
        sets:
          meta:
            format: "Sets"
            type: [Entity, DAGItem, Set]
          asset: *ref_preproduction_asset
      workflow:
        meta:
          format: "Shading"
          type: Directory
        characters:
          meta:
            format: "Characters"
            type: [Entity, DAGItem, Character]
          asset: *ref_preproduction_asset
        props:
          meta:
            format: "Props"
            type: [Entity, DAGItem, Prop]
          asset: *ref_preproduction_asset
        sets:
          meta:
            format: "Sets"
            type: [Entity, DAGItem, Set]
          asset: *ref_preproduction_asset
      workflow:
        meta:
          format: "Texturing"
          type: Directory
        characters:
          meta:
            format: "Characters"
            type: [Entity, DAGItem, Character]
          asset: *ref_preproduction_asset
        props:
          meta:
            format: "Props"
            type: [Entity, DAGItem, Prop]
          asset: *ref_preproduction_asset
        sets:
          meta:
            format: "Sets"
            type: [Entity, DAGItem, Set]
          asset: *ref_preproduction_asset
    #end preproduction
    
    # PROJECT/LIBRARY (Production)
    ###############################
    library_production:
      meta:
        format: "Library"
        type: [Entity, DAGItem, Library]
      # PROJECT/LIBRARY/SCRIPTS
      #########################
      scripts:
        meta:
          format: "Scripts"
          # maybe just a container for code ? Figure out a proper type
          type: [Directory, Code]
      # PROJECT/LIBRARY/CHARACTERS
      ############################
      characters:
        meta:
          format: "Characters"
          type: [Entity, DAGItem, Character]
        asset: *ref_production_asset
      # PROJECT/LIBRARY/PROPS
      #######################
      props:
        meta:
          format: "Props"
          type: [Entity, DAGItem, Prop]
        asset: *ref_production_asset
      # PROJECT/LIBRARY/SETS
      #######################
      sets:
        meta:
          format: "Sets"
          type: [Entity, DAGItem, Set]
        asset: *ref_production_asset
      # PROJECT/LIBRARY/...
      #######################
      exchange:
        meta:
          format: "Exchange"
          type: [Directory, Exchange]
      lenses:
        meta:
          format: "Lenses"
          type: [Directory, Lens]
      vfx:
        meta:
          format: "VFX"
          type: [Directory, VFX]
      shaders:
        meta:
          format: "Workshaders"
          type: [Directory, Shaders]
    # end library
    
    # PROJECT/PUBLIC
    ################
    public:
      meta:
        # this is some sort of access level, which could be represented by the type
        # as well if we need to.
        format: "Public"
        type: [Directory, Public]
      vfx:
        meta:
          format: "Vfx"
      characters:
        meta:
          format: "Characters"
          type: [Entity, DAGItem, Character]
        asset: *ref_production_asset
      props:
        meta:
          format: "Props"
          type: [Entity, DAGItem, Prop]
        asset: *ref_production_asset
      sets:
        meta:
          format: "Sets"
          type: [Entity, DAGItem, Set]
        asset: *ref_production_asset
    # end public
    # PROJECT/OUTPUT_MEDIA
    #######################
    output_media:
      meta:
        format: "OutputMedia"
        type: [Directory, Output]
      preproduction:
        meta:
          format: "PreProduction"
          type: [Directory]
      production:
        meta:
          format: "Production"
          type: [Directory, Production]
      weekly:
        meta:
          format: "Weekly"
          type: [Directory, Review, Weekly]
  # end project
#end root
